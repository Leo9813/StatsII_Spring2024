set.seed(123)
# create empirical distribution of observed data
ECDF <- ecdf(data)
# Function to calculate Kolmogorov-Smirnov test statistic and p-value
ks_test_custom <- function(data) {
n <- length(data)
sorted_data <- sort(data)
empirical_cdf <- (1:n) / n
theoretical_cdf <- pnorm(sorted_data)
D <- max(abs(empirical_cdf - theoretical_cdf))
# Calculate p-value using Kolmogorov-Smirnov CDF
p_value <- 1/sqrt(2*pi) * sum(exp(-(2*k-1)^2*pi^2 / (8*D^2)))
return(list(D = D, p_value = p_value))
}
# Set seed for reproducibility
set.seed(123)
# Generate 1,000 Cauchy random variables
cauchy_data <- rcauchy(1000, location = 0, scale = 1)
# Perform the custom Kolmogorov-Smirnov test
ks_result <- ks_test_custom(cauchy_data)
ks_test_custom <- function(data) {
n <- length(data)
sorted_data <- sort(data)
empirical_cdf <- (1:n) / n
theoretical_cdf <- pnorm(sorted_data)
D <- max(abs(empirical_cdf - theoretical_cdf))
# Calculate p-value using Kolmogorov-Smirnov CDF
p_value <- 1/sqrt(2*pi) * sum(exp(-(2*(1:n)-1)^2*pi^2 / (8*D^2)))
return(list(D = D, p_value = p_value))
}
# Set seed for reproducibility
set.seed(123)
# Generate 1,000 Cauchy random variables
cauchy_data <- rcauchy(1000, location = 0, scale = 1)
# Perform the custom Kolmogorov-Smirnov test
ks_result <- ks_test_custom(cauchy_data)
# Print test result
print(ks_result)
# Function to calculate Kolmogorov-Smirnov test statistic and p-value
ks_test_custom <- function(data) {
n <- length(data)
sorted_data <- sort(data)
empirical_cdf <- (1:n) / n
theoretical_cdf <- pnorm(sorted_data)
D <- max(abs(empirical_cdf - theoretical_cdf))
# Calculate p-value using Kolmogorov-Smirnov CDF
p_value <- sqrt(2*pi)/D * sum(exp(-(2*(1:n)-1)^2*pi^2 / (8*D^2)))
return(list(D = D, p_value = p_value))
}
# Set seed for reproducibility
set.seed(123)
# Generate 1,000 Cauchy random variables
cauchy_data <- rcauchy(1000, location = 0, scale = 1)
# Perform the custom Kolmogorov-Smirnov test
ks_result <- ks_test_custom(cauchy_data)
# Print test result
print(ks_result)
# Problem 1
#####################
# Function to calculate Kolmogorov-Smirnov test statistic and p-value
ks_test_custom <- function(data) {
n <- length(data)
sorted_data <- sort(data)
empirical_cdf <- (1:n) / n
theoretical_cdf <- pnorm(sorted_data)
D <- max(abs(empirical_cdf - theoretical_cdf))
# Calculate p-value using Kolmogorov-Smirnov CDF
p_value <- sqrt(2*pi)/D * sum(exp(-(2*(1:n)-1)^2*pi^2 / (8*D^2)))
return(list(D = D, p_value = p_value))
}
# Set seed for reproducibility
set.seed(123)
# Generate 1,000 Cauchy random variables
cauchy_data <- rcauchy(1000, location = 0, scale = 1)
# Perform the custom Kolmogorov-Smirnov test
ks_result <- ks_test_custom(cauchy_data)
# Print test result
print(ks_result)
# Create empirical distribution of observed data
ECDF <- ecdf(cauchy_data)
empiricalCDF <- ECDF(cauchy_data)
# Generate test statistic
D <- max(abs(empiricalCDF - pnorm(cauchy_data)))
# Print test statistic
print(D)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
# Function to calculate Kolmogorov-Smirnov test statistic and p-value
ks_test_custom <- function(data) {
n <- length(data)
sorted_data <- sort(data)
empirical_cdf <- (1:n) / n
theoretical_cdf <- pnorm(sorted_data)
D <- max(abs(empirical_cdf - theoretical_cdf))
# Calculate p-value using Kolmogorov-Smirnov CDF
p_value <- sqrt(2*pi)/D * sum(exp(-(2*(1:n)-1)^2*pi^2 / (8*D^2)))
return(list(D = D, p_value = p_value))
}
# Set seed for reproducibility
set.seed(123)
# Generate 1,000 Cauchy random variables
cauchy_data <- rcauchy(1000, location = 0, scale = 1)
# Perform the custom Kolmogorov-Smirnov test
ks_result <- ks_test_custom(cauchy_data)
# Print test result
print(ks_result)
set.seed(123)
# create empirical distribution of observed data
ECDF <- ecdf(data)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
# Function to calculate Kolmogorov-Smirnov test statistic and p-value
ks_test_custom <- function(data) {
n <- length(data)
sorted_data <- sort(data)
empirical_cdf <- (1:n) / n
theoretical_cdf <- pnorm(sorted_data)
D <- max(abs(empirical_cdf - theoretical_cdf))
# Calculate p-value using Kolmogorov-Smirnov CDF
p_value <- sqrt(2*pi)/D * sum(exp(-(2*(1:n)-1)^2*pi^2 / (8*D^2)))
return(list(D = D, p_value = p_value))
}
# Set seed for reproducibility
set.seed(123)
# Generate 1,000 Cauchy random variables
cauchy_data <- rcauchy(1000, location = 0, scale = 1)
# Perform the custom Kolmogorov-Smirnov test
ks_result <- ks_test_custom(cauchy_data)
# Print test result
print(ks_result)
set.seed(123)
# create empirical distribution of observed data
ECDF <- ecdf(data)
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Set seed for reproducibility
set.seed(123)
# Create data
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75 * data$x + rnorm(200, 0, 1.5)
# Define objective function for OLS regression
ols_obj <- function(beta, x, y) {
y_pred <- beta[1] + beta[2]*x
residuals <- y - y_pred
sum(residuals^2)
}
# Initial values for beta (intercept and slope)
beta_init <- c(1, 1)
# Optimize objective function using BFGS algorithm
optim_result <- optim(par = beta_init, fn = ols_obj, method = "BFGS", x = data$x, y = data$y)
# Extract estimated coefficients
beta_hat <- optim_result$par
# Print estimated coefficients
print(beta_hat)
# Compare with lm results
lm_result <- lm(y ~ x, data)
print(summary(lm_result)$coefficients)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
# Function to calculate Kolmogorov-Smirnov test statistic and p-value
ks_test_custom <- function(data) {
n <- length(data)
sorted_data <- sort(data)
empirical_cdf <- (1:n) / n
theoretical_cdf <- pnorm(sorted_data)
D <- max(abs(empirical_cdf - theoretical_cdf))
# Calculate p-value using Kolmogorov-Smirnov CDF
p_value <- sqrt(2*pi)/D * sum(exp(-(2*(1:n)-1)^2*pi^2 / (8*D^2)))
return(list(D = D, p_value = p_value))
}
# Set seed for reproducibility
set.seed(123)
# Generate 1,000 Cauchy random variables
cauchy_data <- rcauchy(1000, location = 0, scale = 1)
# Perform the custom Kolmogorov-Smirnov test
ks_result <- ks_test_custom(cauchy_data)
# Print test result
print(ks_result)
set.seed(123)
# create empirical distribution of observed data
ECDF <- ecdf(data)
# Problem 2
#####################
set.seed (123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
# Define objective function for OLS regression
ols_obj <- function(beta, x, y) {
y_pred <- beta[1] + beta[2]*x
residuals <- y - y_pred
sum(residuals^2)
}
# Initial values for beta (intercept and slope)
beta_init <- c(1, 1)
# Optimize objective function using BFGS algorithm
optim_result <- optim(par = beta_init, fn = ols_obj, method = "BFGS", x = data$x, y = data$y)
# Extract estimated coefficients
beta_hat <- optim_result$par
# Print estimated coefficients
print(beta_hat)
# Compare with lm results
lm_result <- lm(y ~ x, data)
print(summary(lm_result)$coefficients)
